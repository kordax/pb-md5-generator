syntax = 'proto3';

package doc_generator_test;

// @header: My Test API main wrappers

/**
 * Client request with specified action.
 */
message ClientRequest {
  string trx = 1; // unique transaction id of each message to match it with server response.

  oneof action {
    TokenRequest token_request = 2;
    RegistrationRequest registration_request = 3;
  }
}

/**
 * Server response with specified action.
 */
message ServerResponse {
  string trx = 1;

  oneof action {
    TokenRequest token_response = 2;
    RegistrationResponse login_request = 3;
  }
}

// @header: Registration/authorization related requests

/*
 * Token request for external API. Returns authorization bearer token (JWT token) payload if login is successful.
  @code[json]:
{
    "trx": "783b9df7-4ab2-481d-8a26-cf30908b673f",
    "tokenRequest": {
        "username": "{{USER}}",
        "password": "{{PASS}}",
        "expiry": 2147483647
    }
}
*/
message TokenRequest {
  string username = 1; // user name (email)
  string password = 2; // password
  int64 expiry = 3; // token expiration period in seconds
}

// @header: My Test API

/*
 * Token response.
 */
message TokenResponse {
  LoginStatus status = 1; // login status
  string token = 2; // base64 encoded jwt token to include in authorization bearer header that you need to decode to use in your header
  int64 valid_till = 3; // valid till (unix timestamp in seconds)
  string error_reason = 4; // error reason if error has occurred
}

/*
 * Registration request.
 * @autocode[json]
 */
message RegistrationRequest {
  string phone = 1; // phone @len=10
  string email = 2; // email
  string password = 3; // password
  int64 token_id = 4; // recaptcha token that's obtained from recaptcha @max=500 @min=13
}

/*
 * Registration response.
 */
message RegistrationResponse {
  RegistrationStatus status = 1; // registration status
}

/*
 * List user servers. Pagination is optional and is not available for all hosts.
 * Client don't have to worry about pagination support. In case pagination is not supported, you will receive a single page with all the results.
 @code[json]:
{
    "trx": "{{trx}}",
    "listServersRequest": {
        "page": 0,
        "page_size": 0,
        "host": "HOST_VULTR"
    }
}
 */
message ListServersRequest {
  int32 page = 1; // page index. if @min=0 is given, then default page size will be used @max=150
  int32 page_size = 2; // page size. @max=500
}

/*
 * List servers response.
 @code[json]:
{
  "trx": "{{trx}}",
  "list_servers_response":  {
    "status":  "LSS_OK",
    "page":  1,
    "page_size":  1,
    "pages":  1,
    "host":  "HOST_VULTR",
    "servers":  [
      {
        "id":  "g_650785b9-9a26-4cc3-ba80-484be2dc30e8",
        "name":  "25167-vc2-1c-1gb-ams-lively-snow"
      }
    ]
  }
}
 */
message ListServersResponse {
  ListServersStatus status = 1; // operation status
  int32 page = 2; // page index. if @min=0 is given, then default page size will be used
  int32 page_size = 3; // page size. @max=500
  int32 pages = 4; // total pages count
  repeated ServerEntry servers = 5; // server entries
}

message ServerEntry {
  string id = 1; // instance id
  string name = 2; // instance label
}

message ServerPlan {
  string name = 1; // plan id
  string class = 2; // plan class
  int64 monthly_rate = 3; // monthly rate (denominated value in POINTS)
  int64 hourly_rate = 4;  // hourly rate (denominated value in POINTS)
  int32 gpus = 5; // number of gpus
  float memory = 6; // memory size in GigaBytes
  int32 network_out = 7; // network output in GigaBytes
  int32 cpus = 8; // number of cpus
  repeated string labels = 9; // associated labels
  repeated string supported_images = 10; // supported image ids. if list is empty then all images are supported
  repeated string supported_regions = 11; // supported region ids. if list is empty then all regions are supported
}

enum LoginStatus {
  LS_OK = 0; // ok
  LS_FAILED = 1; // invalid credentials provided
  LS_INVALID_REQUEST = 2; // invalid request parameters provided
}

enum RegistrationStatus {
  RS_OK = 0; // ok
  RS_EMAIL_ALREADY_REGISTERED = 1; // email already registered
  RS_PHONE_ALREADY_REGISTERED = 2; // phone number already registered
  RS_PASSWORD_IS_TOO_WEAK = 3; // provided password is too weak
  RS_INVALID_EMAIL_PROVIDED = 4; // invalid email provided
}

enum InstanceStatus {
  INSTANCE_BOOTING = 0;
  INSTANCE_RUNNING = 1;
  INSTANCE_OFFLINE = 2;
  INSTANCE_SHUTTING_DOWN = 3;
  INSTANCE_REBOOTING = 4;
  INSTANCE_PROVISIONING = 5;
  INSTANCE_DELETING = 6;
  INSTANCE_MIGRATING = 7;
  INSTANCE_REBUILDING = 8;
  INSTANCE_CLONING = 9;
  INSTANCE_RESTORING = 10;
  INSTANCE_RESIZING = 11;
  INSTANCE_NOT_EXISTING = 12;
  INSTANCE_CANCELLED = 13;
  INSTANCE_CREATING = 14;
  INSTANCE_UPDATING = 15;
  INSTANCE_STATUS_NOT_AVAILABLE = 16; // instance status cannot be obtained for this type of instance
}

enum ListServersStatus {
  LSS_OK = 0; // ok
  LSS_INVALID_HOSTING_PROVIDER = 1; // invalid host provided
  LSS_BAD_PAYLOAD = 2; // bad request (invalid page index or page size)
  LSS_SELLER_NOT_AVAILABLE = 3;
}