// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.3
// source: test_proto

package test_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginStatus int32

const (
	LoginStatus_LS_OK              LoginStatus = 0 // ok
	LoginStatus_LS_FAILED          LoginStatus = 1 // invalid credentials provided
	LoginStatus_LS_INVALID_REQUEST LoginStatus = 2 // invalid request parameters provided
)

// Enum value maps for LoginStatus.
var (
	LoginStatus_name = map[int32]string{
		0: "LS_OK",
		1: "LS_FAILED",
		2: "LS_INVALID_REQUEST",
	}
	LoginStatus_value = map[string]int32{
		"LS_OK":              0,
		"LS_FAILED":          1,
		"LS_INVALID_REQUEST": 2,
	}
)

func (x LoginStatus) Enum() *LoginStatus {
	p := new(LoginStatus)
	*p = x
	return p
}

func (x LoginStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (LoginStatus) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x LoginStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginStatus.Descriptor instead.
func (LoginStatus) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type RegistrationStatus int32

const (
	RegistrationStatus_RS_OK                       RegistrationStatus = 0 // ok
	RegistrationStatus_RS_EMAIL_ALREADY_REGISTERED RegistrationStatus = 1 // email already registered
	RegistrationStatus_RS_PHONE_ALREADY_REGISTERED RegistrationStatus = 2 // phone number already registered
	RegistrationStatus_RS_PASSWORD_IS_TOO_WEAK     RegistrationStatus = 3 // provided password is too weak
	RegistrationStatus_RS_INVALID_EMAIL_PROVIDED   RegistrationStatus = 4 // invalid email provided
)

// Enum value maps for RegistrationStatus.
var (
	RegistrationStatus_name = map[int32]string{
		0: "RS_OK",
		1: "RS_EMAIL_ALREADY_REGISTERED",
		2: "RS_PHONE_ALREADY_REGISTERED",
		3: "RS_PASSWORD_IS_TOO_WEAK",
		4: "RS_INVALID_EMAIL_PROVIDED",
	}
	RegistrationStatus_value = map[string]int32{
		"RS_OK":                       0,
		"RS_EMAIL_ALREADY_REGISTERED": 1,
		"RS_PHONE_ALREADY_REGISTERED": 2,
		"RS_PASSWORD_IS_TOO_WEAK":     3,
		"RS_INVALID_EMAIL_PROVIDED":   4,
	}
)

func (x RegistrationStatus) Enum() *RegistrationStatus {
	p := new(RegistrationStatus)
	*p = x
	return p
}

func (x RegistrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[1].Descriptor()
}

func (RegistrationStatus) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[1]
}

func (x RegistrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationStatus.Descriptor instead.
func (RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

type InstanceStatus int32

const (
	InstanceStatus_INSTANCE_BOOTING              InstanceStatus = 0
	InstanceStatus_INSTANCE_RUNNING              InstanceStatus = 1
	InstanceStatus_INSTANCE_OFFLINE              InstanceStatus = 2
	InstanceStatus_INSTANCE_SHUTTING_DOWN        InstanceStatus = 3
	InstanceStatus_INSTANCE_REBOOTING            InstanceStatus = 4
	InstanceStatus_INSTANCE_PROVISIONING         InstanceStatus = 5
	InstanceStatus_INSTANCE_DELETING             InstanceStatus = 6
	InstanceStatus_INSTANCE_MIGRATING            InstanceStatus = 7
	InstanceStatus_INSTANCE_REBUILDING           InstanceStatus = 8
	InstanceStatus_INSTANCE_CLONING              InstanceStatus = 9
	InstanceStatus_INSTANCE_RESTORING            InstanceStatus = 10
	InstanceStatus_INSTANCE_RESIZING             InstanceStatus = 11
	InstanceStatus_INSTANCE_NOT_EXISTING         InstanceStatus = 12
	InstanceStatus_INSTANCE_CANCELLED            InstanceStatus = 13
	InstanceStatus_INSTANCE_CREATING             InstanceStatus = 14
	InstanceStatus_INSTANCE_UPDATING             InstanceStatus = 15
	InstanceStatus_INSTANCE_STATUS_NOT_AVAILABLE InstanceStatus = 16 // instance status cannot be obtained for this type of instance
)

// Enum value maps for InstanceStatus.
var (
	InstanceStatus_name = map[int32]string{
		0:  "INSTANCE_BOOTING",
		1:  "INSTANCE_RUNNING",
		2:  "INSTANCE_OFFLINE",
		3:  "INSTANCE_SHUTTING_DOWN",
		4:  "INSTANCE_REBOOTING",
		5:  "INSTANCE_PROVISIONING",
		6:  "INSTANCE_DELETING",
		7:  "INSTANCE_MIGRATING",
		8:  "INSTANCE_REBUILDING",
		9:  "INSTANCE_CLONING",
		10: "INSTANCE_RESTORING",
		11: "INSTANCE_RESIZING",
		12: "INSTANCE_NOT_EXISTING",
		13: "INSTANCE_CANCELLED",
		14: "INSTANCE_CREATING",
		15: "INSTANCE_UPDATING",
		16: "INSTANCE_STATUS_NOT_AVAILABLE",
	}
	InstanceStatus_value = map[string]int32{
		"INSTANCE_BOOTING":              0,
		"INSTANCE_RUNNING":              1,
		"INSTANCE_OFFLINE":              2,
		"INSTANCE_SHUTTING_DOWN":        3,
		"INSTANCE_REBOOTING":            4,
		"INSTANCE_PROVISIONING":         5,
		"INSTANCE_DELETING":             6,
		"INSTANCE_MIGRATING":            7,
		"INSTANCE_REBUILDING":           8,
		"INSTANCE_CLONING":              9,
		"INSTANCE_RESTORING":            10,
		"INSTANCE_RESIZING":             11,
		"INSTANCE_NOT_EXISTING":         12,
		"INSTANCE_CANCELLED":            13,
		"INSTANCE_CREATING":             14,
		"INSTANCE_UPDATING":             15,
		"INSTANCE_STATUS_NOT_AVAILABLE": 16,
	}
)

func (x InstanceStatus) Enum() *InstanceStatus {
	p := new(InstanceStatus)
	*p = x
	return p
}

func (x InstanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[2].Descriptor()
}

func (InstanceStatus) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[2]
}

func (x InstanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus.Descriptor instead.
func (InstanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

type ListServersStatus int32

const (
	ListServersStatus_LSS_OK                       ListServersStatus = 0 // ok
	ListServersStatus_LSS_INVALID_HOSTING_PROVIDER ListServersStatus = 1 // invalid host provided
	ListServersStatus_LSS_BAD_PAYLOAD              ListServersStatus = 2 // bad request (invalid page index or page size)
	ListServersStatus_LSS_SELLER_NOT_AVAILABLE     ListServersStatus = 3
)

// Enum value maps for ListServersStatus.
var (
	ListServersStatus_name = map[int32]string{
		0: "LSS_OK",
		1: "LSS_INVALID_HOSTING_PROVIDER",
		2: "LSS_BAD_PAYLOAD",
		3: "LSS_SELLER_NOT_AVAILABLE",
	}
	ListServersStatus_value = map[string]int32{
		"LSS_OK":                       0,
		"LSS_INVALID_HOSTING_PROVIDER": 1,
		"LSS_BAD_PAYLOAD":              2,
		"LSS_SELLER_NOT_AVAILABLE":     3,
	}
)

func (x ListServersStatus) Enum() *ListServersStatus {
	p := new(ListServersStatus)
	*p = x
	return p
}

func (x ListServersStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListServersStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[3].Descriptor()
}

func (ListServersStatus) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[3]
}

func (x ListServersStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListServersStatus.Descriptor instead.
func (ListServersStatus) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

// *
// Client request with specified action.
type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trx string `protobuf:"bytes,1,opt,name=trx,proto3" json:"trx,omitempty"` // unique transaction id of each message to match it with server response.
	// Types that are assignable to Action:
	//
	//	*ClientRequest_TokenRequest
	//	*ClientRequest_RegistrationRequest
	Action isClientRequest_Action `protobuf_oneof:"action"`
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *ClientRequest) GetTrx() string {
	if x != nil {
		return x.Trx
	}
	return ""
}

func (m *ClientRequest) GetAction() isClientRequest_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ClientRequest) GetTokenRequest() *TokenRequest {
	if x, ok := x.GetAction().(*ClientRequest_TokenRequest); ok {
		return x.TokenRequest
	}
	return nil
}

func (x *ClientRequest) GetRegistrationRequest() *RegistrationRequest {
	if x, ok := x.GetAction().(*ClientRequest_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

type isClientRequest_Action interface {
	isClientRequest_Action()
}

type ClientRequest_TokenRequest struct {
	TokenRequest *TokenRequest `protobuf:"bytes,2,opt,name=token_request,json=tokenRequest,proto3,oneof"`
}

type ClientRequest_RegistrationRequest struct {
	RegistrationRequest *RegistrationRequest `protobuf:"bytes,3,opt,name=registration_request,json=registrationRequest,proto3,oneof"`
}

func (*ClientRequest_TokenRequest) isClientRequest_Action() {}

func (*ClientRequest_RegistrationRequest) isClientRequest_Action() {}

// *
// Server response with specified action.
type ServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trx string `protobuf:"bytes,1,opt,name=trx,proto3" json:"trx,omitempty"`
	// Types that are assignable to Action:
	//
	//	*ServerResponse_TokenResponse
	//	*ServerResponse_LoginRequest
	Action isServerResponse_Action `protobuf_oneof:"action"`
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *ServerResponse) GetTrx() string {
	if x != nil {
		return x.Trx
	}
	return ""
}

func (m *ServerResponse) GetAction() isServerResponse_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ServerResponse) GetTokenResponse() *TokenRequest {
	if x, ok := x.GetAction().(*ServerResponse_TokenResponse); ok {
		return x.TokenResponse
	}
	return nil
}

func (x *ServerResponse) GetLoginRequest() *RegistrationResponse {
	if x, ok := x.GetAction().(*ServerResponse_LoginRequest); ok {
		return x.LoginRequest
	}
	return nil
}

type isServerResponse_Action interface {
	isServerResponse_Action()
}

type ServerResponse_TokenResponse struct {
	TokenResponse *TokenRequest `protobuf:"bytes,2,opt,name=token_response,json=tokenResponse,proto3,oneof"`
}

type ServerResponse_LoginRequest struct {
	LoginRequest *RegistrationResponse `protobuf:"bytes,3,opt,name=login_request,json=loginRequest,proto3,oneof"`
}

func (*ServerResponse_TokenResponse) isServerResponse_Action() {}

func (*ServerResponse_LoginRequest) isServerResponse_Action() {}

// Token request for external API. Returns authorization bearer token (JWT token) payload if login is successful.
// @code[json]:
// {
// "trx": "783b9df7-4ab2-481d-8a26-cf30908b673f",
// "tokenRequest": {
// "username": "{{USER}}",
// "password": "{{PASS}}",
// "expiry": 2147483647
// }
// }
type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // user name (email)
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // password
	Expiry   int64  `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`    // token expiration period in seconds
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (x *TokenRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TokenRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TokenRequest) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

// Token response.
type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      LoginStatus `protobuf:"varint,1,opt,name=status,proto3,enum=doc_generator_test.LoginStatus" json:"status,omitempty"` // login status
	Token       string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`                                        // base64 encoded jwt token to include in authorization bearer header that you need to decode to use in your header
	ValidTill   int64       `protobuf:"varint,3,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`              // valid till (unix timestamp in seconds)
	ErrorReason string      `protobuf:"bytes,4,opt,name=error_reason,json=errorReason,proto3" json:"error_reason,omitempty"`         // error reason if error has occurred
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

func (x *TokenResponse) GetStatus() LoginStatus {
	if x != nil {
		return x.Status
	}
	return LoginStatus_LS_OK
}

func (x *TokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenResponse) GetValidTill() int64 {
	if x != nil {
		return x.ValidTill
	}
	return 0
}

func (x *TokenResponse) GetErrorReason() string {
	if x != nil {
		return x.ErrorReason
	}
	return ""
}

// Registration request.
// @autocode[json]
type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`                     // phone @len=10
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`                     // email
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`               // password
	TokenId  int64  `protobuf:"varint,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"` // recaptcha token that's obtained from recaptcha @max=500 @min=13
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{4}
}

func (x *RegistrationRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegistrationRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegistrationRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegistrationRequest) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

// Registration response.
type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegistrationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=doc_generator_test.RegistrationStatus" json:"status,omitempty"` // registration status
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{5}
}

func (x *RegistrationResponse) GetStatus() RegistrationStatus {
	if x != nil {
		return x.Status
	}
	return RegistrationStatus_RS_OK
}

// List user servers. Pagination is optional and is not available for all hosts.
// Client don't have to worry about pagination support. In case pagination is not supported, you will receive a single page with all the results.
// @code[json]:
// {
// "trx": "{{trx}}",
// "listServersRequest": {
// "page": 0,
// "page_size": 0,
// "host": "HOST_VULTR"
// }
// }
type ListServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // page index. if @min=0 is given, then default page size will be used @max=150
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // page size. @max=500
}

func (x *ListServersRequest) Reset() {
	*x = ListServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersRequest) ProtoMessage() {}

func (x *ListServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersRequest.ProtoReflect.Descriptor instead.
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{6}
}

func (x *ListServersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListServersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// List servers response.
// @code[json]:
// {
// "trx": "{{trx}}",
// "list_servers_response":  {
// "status":  "LSS_OK",
// "page":  1,
// "page_size":  1,
// "pages":  1,
// "host":  "HOST_VULTR",
// "servers":  [
// {
// "id":  "g_650785b9-9a26-4cc3-ba80-484be2dc30e8",
// "name":  "25167-vc2-1c-1gb-ams-lively-snow"
// }
// ]
// }
// }
type ListServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ListServersStatus `protobuf:"varint,1,opt,name=status,proto3,enum=doc_generator_test.ListServersStatus" json:"status,omitempty"` // operation status
	Page     int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                               // page index. if @min=0 is given, then default page size will be used
	PageSize int32             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                       // page size. @max=500
	Pages    int32             `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`                                             // total pages count
	Servers  []*ServerEntry    `protobuf:"bytes,5,rep,name=servers,proto3" json:"servers,omitempty"`                                          // server entries
}

func (x *ListServersResponse) Reset() {
	*x = ListServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersResponse) ProtoMessage() {}

func (x *ListServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersResponse.ProtoReflect.Descriptor instead.
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{7}
}

func (x *ListServersResponse) GetStatus() ListServersStatus {
	if x != nil {
		return x.Status
	}
	return ListServersStatus_LSS_OK
}

func (x *ListServersResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListServersResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListServersResponse) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *ListServersResponse) GetServers() []*ServerEntry {
	if x != nil {
		return x.Servers
	}
	return nil
}

type ServerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // instance id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // instance label
}

func (x *ServerEntry) Reset() {
	*x = ServerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEntry) ProtoMessage() {}

func (x *ServerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEntry.ProtoReflect.Descriptor instead.
func (*ServerEntry) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{8}
}

func (x *ServerEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServerPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                  // plan id
	Class            string   `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`                                                // plan class
	MonthlyRate      int64    `protobuf:"varint,3,opt,name=monthly_rate,json=monthlyRate,proto3" json:"monthly_rate,omitempty"`                // monthly rate (denominated value in POINTS)
	HourlyRate       int64    `protobuf:"varint,4,opt,name=hourly_rate,json=hourlyRate,proto3" json:"hourly_rate,omitempty"`                   // hourly rate (denominated value in POINTS)
	Gpus             int32    `protobuf:"varint,5,opt,name=gpus,proto3" json:"gpus,omitempty"`                                                 // number of gpus
	Memory           float32  `protobuf:"fixed32,6,opt,name=memory,proto3" json:"memory,omitempty"`                                            // memory size in GigaBytes
	NetworkOut       int32    `protobuf:"varint,7,opt,name=network_out,json=networkOut,proto3" json:"network_out,omitempty"`                   // network output in GigaBytes
	Cpus             int32    `protobuf:"varint,8,opt,name=cpus,proto3" json:"cpus,omitempty"`                                                 // number of cpus
	Labels           []string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`                                              // associated labels
	SupportedImages  []string `protobuf:"bytes,10,rep,name=supported_images,json=supportedImages,proto3" json:"supported_images,omitempty"`    // supported image ids. if list is empty then all images are supported
	SupportedRegions []string `protobuf:"bytes,11,rep,name=supported_regions,json=supportedRegions,proto3" json:"supported_regions,omitempty"` // supported region ids. if list is empty then all regions are supported
}

func (x *ServerPlan) Reset() {
	*x = ServerPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPlan) ProtoMessage() {}

func (x *ServerPlan) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPlan.ProtoReflect.Descriptor instead.
func (*ServerPlan) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{9}
}

func (x *ServerPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerPlan) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ServerPlan) GetMonthlyRate() int64 {
	if x != nil {
		return x.MonthlyRate
	}
	return 0
}

func (x *ServerPlan) GetHourlyRate() int64 {
	if x != nil {
		return x.HourlyRate
	}
	return 0
}

func (x *ServerPlan) GetGpus() int32 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

func (x *ServerPlan) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ServerPlan) GetNetworkOut() int32 {
	if x != nil {
		return x.NetworkOut
	}
	return 0
}

func (x *ServerPlan) GetCpus() int32 {
	if x != nil {
		return x.Cpus
	}
	return 0
}

func (x *ServerPlan) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServerPlan) GetSupportedImages() []string {
	if x != nil {
		return x.SupportedImages
	}
	return nil
}

func (x *ServerPlan) GetSupportedRegions() []string {
	if x != nil {
		return x.SupportedRegions
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x64, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x72, 0x78, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x72, 0x78, 0x12, 0x49, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5e, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x3f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x53, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x53,
	0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xb2, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x4c, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x10, 0x2a, 0x74, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x53, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x4c, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_test_proto_goTypes = []interface{}{
	(LoginStatus)(0),             // 0: doc_generator_test.LoginStatus
	(RegistrationStatus)(0),      // 1: doc_generator_test.RegistrationStatus
	(InstanceStatus)(0),          // 2: doc_generator_test.InstanceStatus
	(ListServersStatus)(0),       // 3: doc_generator_test.ListServersStatus
	(*ClientRequest)(nil),        // 4: doc_generator_test.ClientRequest
	(*ServerResponse)(nil),       // 5: doc_generator_test.ServerResponse
	(*TokenRequest)(nil),         // 6: doc_generator_test.TokenRequest
	(*TokenResponse)(nil),        // 7: doc_generator_test.TokenResponse
	(*RegistrationRequest)(nil),  // 8: doc_generator_test.RegistrationRequest
	(*RegistrationResponse)(nil), // 9: doc_generator_test.RegistrationResponse
	(*ListServersRequest)(nil),   // 10: doc_generator_test.ListServersRequest
	(*ListServersResponse)(nil),  // 11: doc_generator_test.ListServersResponse
	(*ServerEntry)(nil),          // 12: doc_generator_test.ServerEntry
	(*ServerPlan)(nil),           // 13: doc_generator_test.ServerPlan
}
var file_test_proto_depIdxs = []int32{
	6,  // 0: doc_generator_test.ClientRequest.token_request:type_name -> doc_generator_test.TokenRequest
	8,  // 1: doc_generator_test.ClientRequest.registration_request:type_name -> doc_generator_test.RegistrationRequest
	6,  // 2: doc_generator_test.ServerResponse.token_response:type_name -> doc_generator_test.TokenRequest
	9,  // 3: doc_generator_test.ServerResponse.login_request:type_name -> doc_generator_test.RegistrationResponse
	0,  // 4: doc_generator_test.TokenResponse.status:type_name -> doc_generator_test.LoginStatus
	1,  // 5: doc_generator_test.RegistrationResponse.status:type_name -> doc_generator_test.RegistrationStatus
	3,  // 6: doc_generator_test.ListServersResponse.status:type_name -> doc_generator_test.ListServersStatus
	12, // 7: doc_generator_test.ListServersResponse.servers:type_name -> doc_generator_test.ServerEntry
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientRequest_TokenRequest)(nil),
		(*ClientRequest_RegistrationRequest)(nil),
	}
	file_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerResponse_TokenResponse)(nil),
		(*ServerResponse_LoginRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
